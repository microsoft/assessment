using Assessment.Shared.ZeroTrust.Data;
using Assessment.Shared.ZeroTrust.Recommendations;
using Microsoft.Graph;

namespace Assessment.Shared.ZeroTrust
{
    public class ZeroTrustDataService : IZeroTrustDataService
    {
        private readonly GraphServiceClient client;        

        public ZeroTrustDataService(GraphServiceClient client)
        {
            this.client = client;
        }

        private async Task GetTenantInfoAsync(ZeroTrustData zeroTrustData)
        {
            var tenant = await client.Organization.Request().GetAsync();
            var me = await client.Me.Request().GetAsync();

            if (tenant != null)
            {
                zeroTrustData.TenantName = tenant[0].DisplayName;
                zeroTrustData.AssessedBy = string.Format("{0} ({1})", me.DisplayName, me.Mail);
            }
            zeroTrustData.DateAssessed = DateTime.UtcNow;
        }

        public async Task<ZeroTrustData?> GetZeroTrustDataAsync()
        {
            ZeroTrustData zeroTrustData = InitializeMetadata();
            await GetTenantInfoAsync(zeroTrustData);
            foreach (var bs in zeroTrustData.BusinessScenarios)
            {
                foreach (var ts in bs.TechnicalScenarios)
                {
                    foreach (var r in ts.Recommendations)
                    {
                        if (string.IsNullOrEmpty(r.ClassName))
                        {
                            IZeroTrustRecommendation recommendation = new R0000_RecommendationTemplate();
                            await recommendation.CheckRecommendationAsync(r, client);
                        }
                        else
                        {
                            IZeroTrustRecommendation? recommendation = Activator.CreateInstance(Type.GetType($"Assessment.Shared.ZeroTrust.Recommendations.{r.ClassName}")) as IZeroTrustRecommendation;
                            if (recommendation != null)
                            {
                                await recommendation.CheckRecommendationAsync(r, client);
                            }
                        }
                    }
                }
            }
            return zeroTrustData;
        }

        //private ZeroTrustData InitializeMetadata()
        //{
        //    ZeroTrustData zeroTrustData = new ZeroTrustData();
        //    ZeroTrustBusinessScenario bs; ZeroTrustTechnicalScenario ts; ZeroTrustRecommendation r; ZeroTrustCheck c;

        //    bs = new ZeroTrustBusinessScenario() { Name = "I want my people to do their job securely from anywhere." }; zeroTrustData.BusinessScenarios.Add(bs);
        //    ts = new ZeroTrustTechnicalScenario() { Name = "I need to strengthen my credentials" }; bs.TechnicalScenarios.Add(ts);
        //    r = new ZeroTrustRecommendation() { Name = "Multi-Factor Authentication (MFA) has been enabled and appropriate methods for MFA have been selected", ClassName = "" }; ts.Recommendations.Add(r);
        //    c = new ZeroTrustCheck() { Id = "R0002_C01", Name = "Combined User Registration has been enabled for your directory, allows users to register for SSPR and MFA in one step", License = "P1", ProductName = "Azure Active Directory", ZeroTrustPrincipal = "Assume Breach" }; r.Checks.Add(c);
        //    c = new ZeroTrustCheck() { Id = "R0002_C02", Name = "Configure MFA and select appropriate methods for MFA", License = "Free", ProductName = "Azure Active Directory", ZeroTrustPrincipal = "" }; r.Checks.Add(c);


        //    bs = new ZeroTrustBusinessScenario() { Name = "I want to identify and protect my sensitive business data."}; zeroTrustData.BusinessScenarios.Add(bs);
        //    ts = new ZeroTrustTechnicalScenario() { Name = "How do I secure my M365 Apps and Data within those apps?" };bs.TechnicalScenarios.Add(ts);
        //    r = new ZeroTrustRecommendation() { Name = "Protect from data leakage on mobile devices at the application layer", ClassName = "R0001_MobileDataLeakage" };ts.Recommendations.Add(r);
        //    c = new ZeroTrustCheck() { Id = "R0001_C01", Name = "Enable Intune App Protection Policy for iOS", License = "", ProductName = "EndPoint Manager / Intune", ZeroTrustPrincipal = ""  }; r.Checks.Add(c);
        //    c = new ZeroTrustCheck() { Id = "R0001_C02", Name = "Enable Intune App Protection Policy for Android", License = "", ProductName = "EndPoint Manager / Intune", ZeroTrustPrincipal = "" }; r.Checks.Add(c);

        //    return zeroTrustData;
        //}

        //Code within region is auto-generated by Import-ZeroTrustScenarios.ps1. Do not edit manually to avoid losing changes.
        #region AutoGeneratedZeroTrustDataFromExcel
        private ZeroTrustData InitializeMetadata()
        {
            ZeroTrustData zeroTrustData = new ZeroTrustData();
            ZeroTrustBusinessScenario bs; ZeroTrustTechnicalScenario ts; ZeroTrustRecommendation r; ZeroTrustCheck c;
            bs = new ZeroTrustBusinessScenario() { Name = "I want my people to do their job securely from anywhere." }; zeroTrustData.BusinessScenarios.Add(bs);
               ts = new ZeroTrustTechnicalScenario() { Name = "Identity Pre-req" }; bs.TechnicalScenarios.Add(ts);
                  r = new ZeroTrustRecommendation() { Name = "Determine the identity/authentication model to be used- Cloud Only, Hybrid, with PHS, hybrid with PTA, or Federated", ClassName = "" }; ts.Recommendations.Add(r);
                     c = new ZeroTrustCheck() { Id = "", Name = "Hybrid Identity", License = "", ProductName = "Azure Active Directory", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Enable PHS", License = "", ProductName = "Azure Active Directory", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Enable PTA", License = "", ProductName = "Azure Active Directory", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Enable Federation", License = "", ProductName = "Azure Active Directory", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
            bs = new ZeroTrustBusinessScenario() { Name = "I want my people to do their job securely from anywhere." }; zeroTrustData.BusinessScenarios.Add(bs);
               ts = new ZeroTrustTechnicalScenario() { Name = "1.1 - I need to strengthen my credentials" }; bs.TechnicalScenarios.Add(ts);
                  r = new ZeroTrustRecommendation() { Name = "Multi-Factor Authentication (MFA) has been enabled and appropriate methods for MFA have been selected", ClassName = "" }; ts.Recommendations.Add(r);
                     c = new ZeroTrustCheck() { Id = "", Name = "Combined User Registration has been enabled for your directory, allows users to register for SSPR and MFA in one step", License = "P1", ProductName = "Azure Active Directory", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Configure MFA and select appropriate methods for MFA", License = "Free", ProductName = "Azure Active Directory", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Configure a Conditional Access policy to require MFA registration - Deploy CA tempalte", License = "P1", ProductName = "Azure Active Directory", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Enable Nudge to register Auth App", License = "Free", ProductName = "Azure Active Directory", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Enable IP MFA registration policy", License = "P2", ProductName = "Azure Active Directory", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                  r = new ZeroTrustRecommendation() { Name = "Enable AAD Password Protection to detect and block known weak passwords and their variants, and block additional weak terms specific to your organization.", ClassName = "" }; ts.Recommendations.Add(r);
                     c = new ZeroTrustCheck() { Id = "", Name = "Cloud", License = "Free + P1", ProductName = "AAD Password Protection", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Hybrid Identity", License = "P1", ProductName = "AAD Password Protection", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                  r = new ZeroTrustRecommendation() { Name = "Integrate your Logs with siem tool", ClassName = "" }; ts.Recommendations.Add(r);
            bs = new ZeroTrustBusinessScenario() { Name = "I want my people to do their job securely from anywhere." }; zeroTrustData.BusinessScenarios.Add(bs);
               ts = new ZeroTrustTechnicalScenario() { Name = "1.2 - What policies should I start with to securely configure and gate corporate identity and device access?" }; bs.TechnicalScenarios.Add(ts);
                  r = new ZeroTrustRecommendation() { Name = "Enable user and sign-in risk-based policies to protect user access to resources.", ClassName = "" }; ts.Recommendations.Add(r);
                     c = new ZeroTrustCheck() { Id = "", Name = "Sign Risk Policy (low, medium, high require MFA)", License = "P2", ProductName = "Azure Active Directory", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "User Risk (high change password)", License = "P2", ProductName = "Azure Active Directory", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                  r = new ZeroTrustRecommendation() { Name = "Block clients that don't support multi-factor", ClassName = "" }; ts.Recommendations.Add(r);
                     c = new ZeroTrustCheck() { Id = "", Name = "Block legacy Auth", License = "P1", ProductName = "Azure Active Directory", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Security Defaults", License = "Free", ProductName = "Azure Active Directory", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                  r = new ZeroTrustRecommendation() { Name = "Enroll devices into MDM management", ClassName = "" }; ts.Recommendations.Add(r);
                     c = new ZeroTrustCheck() { Id = "", Name = "Autopilot", License = "P1", ProductName = "Endpoint Manager / Intune", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Apple Business Manager", License = "P1", ProductName = "Endpoint Manager / Intune", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Google Endpoint Management", License = "P1", ProductName = "Endpoint Manager / Intune", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                  r = new ZeroTrustRecommendation() { Name = "Configure MDM configuration profiles that meet Microsoft recommended best practices.", ClassName = "" }; ts.Recommendations.Add(r);
                     c = new ZeroTrustCheck() { Id = "", Name = "Apply Windows Security Baselines", License = "P1", ProductName = "Endpoint Manager / Intune", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Apply iOS recommended settings (Golden Config)", License = "P1", ProductName = "Endpoint Manager / Intune", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Apply Android recommended settings (Golden Config)", License = "P1", ProductName = "Endpoint Manager / Intune", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Apple macOS recommended settings (TBD)", License = "P1", ProductName = "Endpoint Manager / Intune", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                  r = new ZeroTrustRecommendation() { Name = "If you are using on-prem Group Policy for Windows devices, migrate those policies to cloud-based CSPs", ClassName = "" }; ts.Recommendations.Add(r);
                  r = new ZeroTrustRecommendation() { Name = "Configure device compliance policies to ensure devices meet minimum requirements.", ClassName = "" }; ts.Recommendations.Add(r);
                     c = new ZeroTrustCheck() { Id = "", Name = "Configure compliance policies for iOS", License = "P1", ProductName = "Endpoint Manager / Intune", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Configure compliance policies for macOS (TBD)", License = "P1", ProductName = "Endpoint Manager / Intune", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Configure compliance policies for Windows", License = "P1", ProductName = "Endpoint Manager / Intune", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Configure compliance policies for Android Enterprise - Fully managed", License = "P1", ProductName = "Endpoint Manager / Intune", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Configure compliance policies for Android Enterprise - personally owned Work profile", License = "P1", ProductName = "Endpoint Manager / Intune", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Configure actions for non-compliant devices", License = "P1", ProductName = "Endpoint Manager / Intune", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                  r = new ZeroTrustRecommendation() { Name = "Configure Enrollment restrictions", ClassName = "" }; ts.Recommendations.Add(r);
                     c = new ZeroTrustCheck() { Id = "", Name = "Configure enrollment restrictions for iOS devices", License = "P1", ProductName = "Endpoint Manager / Intune", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Configure enrollment restrictions for Windows devices", License = "P1", ProductName = "Endpoint Manager / Intune", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Configure enrollment restrictions for Android devices", License = "P1", ProductName = "Endpoint Manager / Intune", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                  r = new ZeroTrustRecommendation() { Name = "Self-service password reset (SSPR) has been enabled, which gives you credential reset capabilities", ClassName = "" }; ts.Recommendations.Add(r);
                  r = new ZeroTrustRecommendation() { Name = "Onboard devices into an endpoint detection and response product", ClassName = "" }; ts.Recommendations.Add(r);
                     c = new ZeroTrustCheck() { Id = "", Name = "Enable Intune integration", License = "P2", ProductName = "Defender for Endpoint / Intune", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "<or> Enable onboarding using SCCM or 3rd party", License = "P2", ProductName = "Defender for Endpoint / SCCM", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Enable onboarding for Servers via Microsoft Defender for Cloud", License = "P2", ProductName = "Defender for Endpoint/Defender for Cloud", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                  r = new ZeroTrustRecommendation() { Name = "Enable advanced detection controls for endpoint detection and response", ClassName = "" }; ts.Recommendations.Add(r);
                     c = new ZeroTrustCheck() { Id = "", Name = "Enable automated investigation", License = "P2", ProductName = "Defender for Endpoint", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Enable Live Response", License = "P2", ProductName = "Defender for Endpoint", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Live Response for Servers", License = "P2", ProductName = "Defender for Endpoint", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Live Response unsigned script execution", License = "P2", ProductName = "Defender for Endpoint", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Enable Always remediate PUA (Potentially Unwanted Applications)", License = "P2", ProductName = "Defender for Endpoint", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Enable EDR in block mode", License = "P2", ProductName = "Defender for Endpoint", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Enable Automatically resolve alerts", License = "P2", ProductName = "Defender for Endpoint", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Enable allow or block file", License = "P2", ProductName = "Defender for Endpoint", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Enable custom network indicators", License = "P2", ProductName = "Defender for Endpoint", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Enable Tamper protection", License = "P2", ProductName = "Defender for Endpoint", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Enable Show user details", License = "P2", ProductName = "Defender for Endpoint", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Enable skype for business integration", License = "P2", ProductName = "Defender for Endpoint", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Enable Microsoft for Identity integration", License = "P2", ProductName = "Defender for Endpoint", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Enable O365 threat intelligence connection", License = "P2", ProductName = "Defender for Endpoint", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Enable Microsoft Defender for Cloud Apps", License = "P2", ProductName = "Defender for Endpoint", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Enable Microsoft security score", License = "P2", ProductName = "Defender for Endpoint", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Enable web content filtering", License = "P2", ProductName = "Defender for Endpoint", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Enable unified audit log", License = "P2", ProductName = "Defender for Endpoint", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Enable Share endpoint alerts with Microsoft compliance center", License = "P2", ProductName = "Defender for Endpoint", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Enable Microsoft Intune connection", License = "P2", ProductName = "Defender for Endpoint", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Enable Download quarantined files", License = "P2", ProductName = "Defender for Endpoint", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Enable Device discovery", License = "P2", ProductName = "Defender for Endpoint", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
            bs = new ZeroTrustBusinessScenario() { Name = "I want to secure my sensitive data infrastructure from external adversaries and internal malicious actors/actions" }; zeroTrustData.BusinessScenarios.Add(bs);
               ts = new ZeroTrustTechnicalScenario() { Name = "How do I detect and mitigate DDoS attacks.  Maintain availability?" }; bs.TechnicalScenarios.Add(ts);
                  r = new ZeroTrustRecommendation() { Name = "Create an Azure DDoS Protection plan to detect and mitigate voluminous and protocol based attacks.  Ensure and maintain availability", ClassName = "" }; ts.Recommendations.Add(r);
                     c = new ZeroTrustCheck() { Id = "", Name = "Enable DDoS Protection Standard for all Public IP addresses", License = "P2", ProductName = "Azure DDoS Protection Standard", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
               ts = new ZeroTrustTechnicalScenario() { Name = "How do I control outbound and inbound traffic?" }; bs.TechnicalScenarios.Add(ts);
                  r = new ZeroTrustRecommendation() { Name = "Deploy Azure Firewall to control internet engress and ingress", ClassName = "" }; ts.Recommendations.Add(r);
                     c = new ZeroTrustCheck() { Id = "", Name = "Route all outbound and inbound traffic through Azure Firewall", License = "P2", ProductName = "Azure Firewall", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Use firewall rules to explicity allow traffic from specific sources/to specific destinations (FQDNs, URLs, IP ranges)", License = "P2", ProductName = "Azure Firewall", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Use Web Categories to allow traffic based on organizational security policy", License = "P2", ProductName = "Azure Firewall", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
               ts = new ZeroTrustTechnicalScenario() { Name = "How do I enable microsegmentation?" }; bs.TechnicalScenarios.Add(ts);
                  r = new ZeroTrustRecommendation() { Name = "Enable Network Microsegmentation with Azure Firewall", ClassName = "" }; ts.Recommendations.Add(r);
                     c = new ZeroTrustCheck() { Id = "", Name = "Use Azure Firewall to allow/deny traffic from/to specific internal (Azure/On-Prem) sources and destinations", License = "P2", ProductName = "Azure Firewall", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
               ts = new ZeroTrustTechnicalScenario() { Name = "How do I inspect encrypted network traffic?" }; bs.TechnicalScenarios.Add(ts);
                  r = new ZeroTrustRecommendation() { Name = "Enable TLS Inspection on Azure Firewall", ClassName = "" }; ts.Recommendations.Add(r);
                     c = new ZeroTrustCheck() { Id = "", Name = "Use TLS Inspection to Inspect all appropriate outbound TLS traffic (non-regulated) to allow/deny", License = "P2", ProductName = "Azure Firewall", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Use TLS inspection to Inspect all appropriate east-west TLS traffic (non-regulated) to allow/deny", License = "P2", ProductName = "Azure Firewall", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
               ts = new ZeroTrustTechnicalScenario() { Name = "How do I detect and protect against threats in network traffic?" }; bs.TechnicalScenarios.Add(ts);
                  r = new ZeroTrustRecommendation() { Name = "Enable IDPS and Threat Intel for known and 0 day threats.  Prevent C2/exfil communication with Azure Firewall", ClassName = "" }; ts.Recommendations.Add(r);
                     c = new ZeroTrustCheck() { Id = "", Name = "Use Firewall IDPS to inspect all inbound traffic", License = "P2", ProductName = "Azure Firewall", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Use Firewall IDPS to inspect all outbound traffic", License = "P2", ProductName = "Azure Firewall", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Use Firewall IDPS to inspect all east-west traffic", License = "P2", ProductName = "Azure Firewall", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Enable Threat Intelligence to detect and block traffic to known malicious destinations/sources", License = "P2", ProductName = "Azure Firewall", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
               ts = new ZeroTrustTechnicalScenario() { Name = "How do I protect my web applications?" }; bs.TechnicalScenarios.Add(ts);
                  r = new ZeroTrustRecommendation() { Name = "Deploy Azure WAF on Application Gateway and Front Door to protect against web based threats", ClassName = "" }; ts.Recommendations.Add(r);
                     c = new ZeroTrustCheck() { Id = "", Name = "Protect regional (external) Web Applications in Azure/On-Prem/Multi-cloud from OWASP Top 10 and malicious BOTs with Azure WAF on Application Gateway", License = "P2", ProductName = "Azure WAF", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Protect internal only Web Applications in Azure/On-Prem/Multi-cloud from OWASP Top 10 and malicious BOTs with Azure WAF on Application Gateway", License = "P2", ProductName = "Azure WAF", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Protect global Web Application in Azure/On-Prem/Multi-cloud with Azure WAF on Front Door", License = "P2", ProductName = "Azure WAF", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Use Geo-Blocking rules to block access from unwanted sources", License = "P2", ProductName = "Azure WAF", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Use Custom Rules to block malicious IP sources", License = "P2", ProductName = "Azure WAF", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
               ts = new ZeroTrustTechnicalScenario() { Name = "How do I monitor, detect and respond automatically?" }; bs.TechnicalScenarios.Add(ts);
                  r = new ZeroTrustRecommendation() { Name = "Ingest DDoS, Firewall and WAF logs in Azure Sentinel", ClassName = "" }; ts.Recommendations.Add(r);
                     c = new ZeroTrustCheck() { Id = "", Name = "Use DDoS, Firewall and WAF workbooks to visualize logs", License = "P2", ProductName = "Azure Sentinel", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Use Analytic rules, Hunting queries to detect malicious and anomalous traffic patterns", License = "P2", ProductName = "Azure Sentinel", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Use Sentinel Playbooks to automate response actions", License = "P2", ProductName = "Azure Sentinel", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
               ts = new ZeroTrustTechnicalScenario() { Name = "How do I detect and mitigate vulnerabilities and security misconfigurations?" }; bs.TechnicalScenarios.Add(ts);
                  r = new ZeroTrustRecommendation() { Name = "Use Microsoft Defender for Cloud to see security issues, alerts, and vulnerability findings", ClassName = "" }; ts.Recommendations.Add(r);
                     c = new ZeroTrustCheck() { Id = "", Name = "Enable Microsoft Defender for Cloud", License = "P2", ProductName = "Microsoft Defender for Cloud", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Enable Microsoft Defender for Cloud's enhanced security capabilities", License = "P2", ProductName = "Microsoft Defender for Cloud", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Deploy a vulnerability assessment solution to your machines", License = "P2", ProductName = "Microsoft Defender for Cloud", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
            bs = new ZeroTrustBusinessScenario() { Name = "I want to minimize business damage from a major security incident" }; zeroTrustData.BusinessScenarios.Add(bs);
               ts = new ZeroTrustTechnicalScenario() { Name = "2.1 - How do I secure Privileged Administrative Accounts?" }; bs.TechnicalScenarios.Add(ts);
                  r = new ZeroTrustRecommendation() { Name = "Only cloud accounts are used for admin actions.", ClassName = "" }; ts.Recommendations.Add(r);
                     c = new ZeroTrustCheck() { Id = "", Name = "check admins not using sync'd and create cloud", License = "", ProductName = "Azure Active Directory", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Don't sync admin accounts", License = "", ProductName = " ", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Link the priv accounts back to their owners", License = "", ProductName = "Azure Active Directory", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Set up email forward for admin accounts", License = "", ProductName = "Azure Active Directory", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Remove MSA from admin roles", License = "", ProductName = "Azure Active Directory", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Reduce # of GA to less than 5", License = "", ProductName = "Azure Active Directory", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                  r = new ZeroTrustRecommendation() { Name = "Secure accounts with MFA", ClassName = "" }; ts.Recommendations.Add(r);
                     c = new ZeroTrustCheck() { Id = "", Name = "Configure MFA", License = "Free", ProductName = "Azure Active Directory", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Register MFA", License = "free", ProductName = "Azure Active Directory", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Enforce MFA through CA", License = "P1", ProductName = "Azure Active Directory", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Enforce Security Defaults if no CA", License = "Free", ProductName = "Azure Active Directory", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Convert per user to CA based", License = "P1", ProductName = "Azure Active Directory", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                  r = new ZeroTrustRecommendation() { Name = "Configure and register phishing resistant credentials for admin access.", ClassName = "" }; ts.Recommendations.Add(r);
                     c = new ZeroTrustCheck() { Id = "", Name = "Config Phish resist settings", License = "", ProductName = "Azure Active Directory", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Config Auth Strength policies", License = "", ProductName = "Azure Active Directory", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Enroll FIDO keys", License = "", ProductName = "Azure Active Directory", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Enroll Certificate-based auth (eg smartcard / PIV card)", License = "", ProductName = "Azure Active Directory", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Set up Auth App*******", License = "", ProductName = "Azure Active Directory", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "No sms/telephone *******", License = "", ProductName = "Azure Active Directory", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                  r = new ZeroTrustRecommendation() { Name = "Use Just-in-time Access", ClassName = "" }; ts.Recommendations.Add(r);
                     c = new ZeroTrustCheck() { Id = "", Name = "Configure PIM for admin access.", License = "P2", ProductName = "Azure PIM", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Require MFA for JIT access (Requires P2)", License = "P2", ProductName = "Azure Active Directory", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                  r = new ZeroTrustRecommendation() { Name = "Secure your management ports with Just-in-time access", ClassName = "" }; ts.Recommendations.Add(r);
                     c = new ZeroTrustCheck() { Id = "", Name = "Lock down inbound traffic to your Azure VMs with Microsoft Defender for Cloud's Just in time VM access feature.", License = "Microsoft Defender for Cloud paid version", ProductName = "Microsoft Defender for Cloud ", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                  r = new ZeroTrustRecommendation() { Name = "Emergency Accounts (breakglass)", ClassName = "" }; ts.Recommendations.Add(r);
                     c = new ZeroTrustCheck() { Id = "", Name = "Create admin account (breakglass) (2)", License = "P1", ProductName = "Azure Active Directory", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Protect account with Conditional Access (excluuding)", License = "P1", ProductName = "Azure Active Directory", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "LA Workspace", License = "Azure Sub", ProductName = "Azure Active Directory", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Admin account notifications", License = "Azure Sub", ProductName = "Azure Active Directory", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                  r = new ZeroTrustRecommendation() { Name = "Apply cloud-based least privilege controls to bring visibility to over-privileged accounts", ClassName = "" }; ts.Recommendations.Add(r);
                     c = new ZeroTrustCheck() { Id = "", Name = "Least Priv  - Guidance", License = "Free", ProductName = "Azure Active Directory", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "RBAC Wizard", License = "Free", ProductName = "Azure Active Directory", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "PowerShell to determine admins", License = "free", ProductName = "Azure Active Directory", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "PIM to review the admins", License = "P2", ProductName = "Azure Active Directory", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                  r = new ZeroTrustRecommendation() { Name = "PAW / SAW", ClassName = "" }; ts.Recommendations.Add(r);
                     c = new ZeroTrustCheck() { Id = "", Name = "Deploy a workstation", License = "", ProductName = "Microsoft Endpoint Manager", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Deploy a VM", License = "", ProductName = "Microsoft Endpoint Manager", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Enable Conditional Access to protect", License = "", ProductName = "Microsoft Endpoint Manager/Azure Active Directory", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                  r = new ZeroTrustRecommendation() { Name = "Integrate your Logs with siem tool", ClassName = "" }; ts.Recommendations.Add(r);
            bs = new ZeroTrustBusinessScenario() { Name = "I want to identify and protect my sensitive business data." }; zeroTrustData.BusinessScenarios.Add(bs);
               ts = new ZeroTrustTechnicalScenario() { Name = "3.2 - How do I secure my M365 Apps and Data within those apps?" }; bs.TechnicalScenarios.Add(ts);
                  r = new ZeroTrustRecommendation() { Name = "Protect from data leakage on mobile devices at the application layer", ClassName = "R0001_MobileDataLeakage" }; ts.Recommendations.Add(r);
                     c = new ZeroTrustCheck() { Id = "R0001_C01", Name = "Enable intune App Protection Policy for iOS", License = "", ProductName = "Endpoint Manager / Intune", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "R0001_C02", Name = "Enable intune App Protection Policy for Android", License = "", ProductName = "Endpoint Manager / Intune", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Enable MAM CA Policy", License = "", ProductName = "Azure Active Directory", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                  r = new ZeroTrustRecommendation() { Name = "Enable Unified DLP Policies", ClassName = "" }; ts.Recommendations.Add(r);
                     c = new ZeroTrustCheck() { Id = "", Name = "Enable Unified DLP Policies", License = "Office apps - P1, Teams - P2", ProductName = "DLP", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Include the following locations when creating DLP policies:", License = "", ProductName = "", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                  r = new ZeroTrustRecommendation() { Name = "Know your Sensitive Information", ClassName = "" }; ts.Recommendations.Add(r);
                     c = new ZeroTrustCheck() { Id = "", Name = "Know your data. Describe the sensitive information you want to protect.", License = "EDM (E5), Enhanced Policy Templates (E5) Named Entities Detction (E5) Trainable Classifiers (E5), Content/Activity Explorer (E3)", ProductName = "MIP", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Discover and classify sensitive data", License = "", ProductName = "", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "View your sensitive items", License = "", ProductName = "", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Extend a consistent protection experience to popular non-Microsoft apps and services using an SDK", License = "", ProductName = "MIP", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Discover sensitive data on-premise", License = "", ProductName = "MIP", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                  r = new ZeroTrustRecommendation() { Name = "Deploy Endpoint DLP", ClassName = "" }; ts.Recommendations.Add(r);
                     c = new ZeroTrustCheck() { Id = "", Name = "Onboard Devices", License = "", ProductName = "Endpoint DLP", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Configure Endpoint DLP Settings:", License = "", ProductName = "", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Create Endpoint DLP policies", License = "", ProductName = "", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                  r = new ZeroTrustRecommendation() { Name = "Label and protect items for M365 apps and services", ClassName = "" }; ts.Recommendations.Add(r);
                     c = new ZeroTrustCheck() { Id = "", Name = "Define your sensitivity labels", License = "", ProductName = "MIP", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Enable sensitivity labels for Office files in SPO and OneDrive", License = "", ProductName = "", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Manage sensitivity labels in Office apps", License = "", ProductName = "", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Enable co-authoring for files encrytped with sensitivity labels", License = "", ProductName = "", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Apply sensitivity label to content automatically", License = "", ProductName = "", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Use sensitivity labels with Microsoft Teams, Microsoft 365 Groups, and SPO sites", License = "", ProductName = "", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                  r = new ZeroTrustRecommendation() { Name = "Create conditional access and MFA for container labels for ODSP", ClassName = "" }; ts.Recommendations.Add(r);
                     c = new ZeroTrustCheck() { Id = "", Name = "Conditional access will extend to sensitive labeled containers and contents as well", License = "", ProductName = "MIP", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                  r = new ZeroTrustRecommendation() { Name = "Extend your sensitivity labels to Azure by using Azure Purview", ClassName = "" }; ts.Recommendations.Add(r);
                     c = new ZeroTrustCheck() { Id = "", Name = "Extend your sensitivity labels to Azure by using Azure Purview, to discover and label items for Azure Blob Storage, Azure files, Azure Data Lake Storage Gen1, and Azure Data Lake Storage Gen12.", License = "", ProductName = "", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                  r = new ZeroTrustRecommendation() { Name = "Set up Safe Links policies", ClassName = "" }; ts.Recommendations.Add(r);
                     c = new ZeroTrustCheck() { Id = "", Name = "Talk to Sundeep Saini", License = "", ProductName = "Microsoft Defender for O365", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                  r = new ZeroTrustRecommendation() { Name = "Set up Safe Attachments policies", ClassName = "" }; ts.Recommendations.Add(r);
                     c = new ZeroTrustCheck() { Id = "", Name = "Talk to Sundeep Saini", License = "", ProductName = "Microsoft Defender for O365", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                  r = new ZeroTrustRecommendation() { Name = "Configure global settings for Safe Links", ClassName = "" }; ts.Recommendations.Add(r);
                  r = new ZeroTrustRecommendation() { Name = "Create a new conditional access rule to require MFA always for guests and external users.", ClassName = "" }; ts.Recommendations.Add(r);
                  r = new ZeroTrustRecommendation() { Name = "Update the risk-based MFA conditional access rule to exclude guests and external users.", ClassName = "" }; ts.Recommendations.Add(r);
            bs = new ZeroTrustBusinessScenario() { Name = "I want my end users to access the resources they require to do their job securely, from anywhere, on approved devices and apps." }; zeroTrustData.BusinessScenarios.Add(bs);
               ts = new ZeroTrustTechnicalScenario() { Name = "How do secure Secure SaaS based Applications?" }; bs.TechnicalScenarios.Add(ts);
                  r = new ZeroTrustRecommendation() { Name = "Ensure credential hygiene", ClassName = "" }; ts.Recommendations.Add(r);
                     c = new ZeroTrustCheck() { Id = "", Name = "Use Managed Identity for Azure; Use Implement app auth method policy to restrict credentials; use X509 certificate with SNI, limit lifetime to 1 year max", License = "", ProductName = "Azure AD", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                  r = new ZeroTrustRecommendation() { Name = "Ensure API permissions are least privilege", ClassName = "" }; ts.Recommendations.Add(r);
                     c = new ZeroTrustCheck() { Id = "", Name = "Address unused or reducible permissions", License = "", ProductName = "Azure AD", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                  r = new ZeroTrustRecommendation() { Name = "Configure Admin Consent workflows and user consent", ClassName = "" }; ts.Recommendations.Add(r);
                     c = new ZeroTrustCheck() { Id = "", Name = "Restrict user consent to allow users to consent only for apps from verified publishers, and only for permissions that you select. For apps that don't meet these criteria, the decision-making process will be centralized with your organization's security and identity administrator team.", License = "", ProductName = "Azure AD", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                  r = new ZeroTrustRecommendation() { Name = "Set up location based and risk based CA policies for workload identities", ClassName = "" }; ts.Recommendations.Add(r);
                     c = new ZeroTrustCheck() { Id = "", Name = "Set location-based Conditional Access to block untrusted locations; Set risk-based policy to block on Medium and High Risk", License = "", ProductName = "Azure Active Directory", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                  r = new ZeroTrustRecommendation() { Name = "3rd Party App Discovery & Risk", ClassName = "" }; ts.Recommendations.Add(r);
            bs = new ZeroTrustBusinessScenario() { Name = "I want my key corporate data protected from malicious actions, internal and external." }; zeroTrustData.BusinessScenarios.Add(bs);
               ts = new ZeroTrustTechnicalScenario() { Name = "Corporate Data is classified and protected" }; bs.TechnicalScenarios.Add(ts);
                  r = new ZeroTrustRecommendation() { Name = "Classify and label sensitive data, and encrypt high business impact data.", ClassName = "" }; ts.Recommendations.Add(r);
                  r = new ZeroTrustRecommendation() { Name = "Monitor when sensitive data is accessed in M365, alert when risky behavior is detected, and automatically restrict sharing to prevent unauthorized access.", ClassName = "" }; ts.Recommendations.Add(r);
                  r = new ZeroTrustRecommendation() { Name = "Monitor when sensitive data is accessed in M365, alert when risky behavior is detected, and automatically restrict sharing to prevent unauthorized access.", ClassName = "" }; ts.Recommendations.Add(r);
               ts = new ZeroTrustTechnicalScenario() { Name = "End users cannot consent to applications" }; bs.TechnicalScenarios.Add(ts);
                  r = new ZeroTrustRecommendation() { Name = "Conditional Access policies enforce the highest corporate security standards to access this data.", ClassName = "" }; ts.Recommendations.Add(r);
               ts = new ZeroTrustTechnicalScenario() { Name = "Shadow IT is being detected and moved into a managed state" }; bs.TechnicalScenarios.Add(ts);
                  r = new ZeroTrustRecommendation() { Name = "Admin consent is setup that requires admin approval to consent to an application for the users or the tenant", ClassName = "" }; ts.Recommendations.Add(r);
               ts = new ZeroTrustTechnicalScenario() { Name = "Insider Threat detection" }; bs.TechnicalScenarios.Add(ts);
                  r = new ZeroTrustRecommendation() { Name = "Monitor continuous risky behavior by end users", ClassName = "" }; ts.Recommendations.Add(r);
                  r = new ZeroTrustRecommendation() { Name = "Determine unauthorized SaaS apps being used in the environment", ClassName = "" }; ts.Recommendations.Add(r);
               ts = new ZeroTrustTechnicalScenario() { Name = "Backups" }; bs.TechnicalScenarios.Add(ts);
                  r = new ZeroTrustRecommendation() { Name = "Basic insider threat detection monitoring is enabled for critical business Intellectual Property", ClassName = "" }; ts.Recommendations.Add(r);
            bs = new ZeroTrustBusinessScenario() { Name = "I want to detect malicious behavior as quickly as possible" }; zeroTrustData.BusinessScenarios.Add(bs);
               ts = new ZeroTrustTechnicalScenario() { Name = "Alerts and log data are centralized in one location" }; bs.TechnicalScenarios.Add(ts);
                  r = new ZeroTrustRecommendation() { Name = "Endpoint DLP logs", ClassName = "" }; ts.Recommendations.Add(r);
                  r = new ZeroTrustRecommendation() { Name = "Azure AD Logs (Sign-In, Audit, Risk) are being sent to a SIEM", ClassName = "" }; ts.Recommendations.Add(r);
                  r = new ZeroTrustRecommendation() { Name = "Endpoint detection logs are being sent to a central location", ClassName = "" }; ts.Recommendations.Add(r);
                  r = new ZeroTrustRecommendation() { Name = "SaaS App monitoring sent to central location", ClassName = "" }; ts.Recommendations.Add(r);
               ts = new ZeroTrustTechnicalScenario() { Name = "Playbooks/Runbooks are being followed for most critical assets and attack scenarios" }; bs.TechnicalScenarios.Add(ts);
                  r = new ZeroTrustRecommendation() { Name = "Azure AD SecOps guide for high risk is being monitored for", ClassName = "" }; ts.Recommendations.Add(r);
                  r = new ZeroTrustRecommendation() { Name = "Other critical Sentinel workbooks that all customers should be doing?", ClassName = "" }; ts.Recommendations.Add(r);
            bs = new ZeroTrustBusinessScenario() { Name = "I want to limit the damage spread to my business when an attack is successful" }; zeroTrustData.BusinessScenarios.Add(bs);
               ts = new ZeroTrustTechnicalScenario() { Name = "Administrative access is limited to least privs and when needed" }; bs.TechnicalScenarios.Add(ts);
                  r = new ZeroTrustRecommendation() { Name = "PIM for Admins", ClassName = "" }; ts.Recommendations.Add(r);
                  r = new ZeroTrustRecommendation() { Name = "LAPS for workstations", ClassName = "" }; ts.Recommendations.Add(r);
                  r = new ZeroTrustRecommendation() { Name = "Local admin permissions removed from end users", ClassName = "" }; ts.Recommendations.Add(r);
                  r = new ZeroTrustRecommendation() { Name = "Access Reviews done on admin account roles", ClassName = "" }; ts.Recommendations.Add(r);
                  r = new ZeroTrustRecommendation() { Name = "Audits on priv accounts to ensure they are using the least priv role for the task", ClassName = "" }; ts.Recommendations.Add(r);
               ts = new ZeroTrustTechnicalScenario() { Name = "Network Segmentation" }; bs.TechnicalScenarios.Add(ts);
                  r = new ZeroTrustRecommendation() { Name = "Local hosts are unable to talk to each other. Preventing east to west type of traffic", ClassName = "" }; ts.Recommendations.Add(r);
            bs = new ZeroTrustBusinessScenario() { Name = "I need to meet my regulatory compliance while embracing ZT strategy" }; zeroTrustData.BusinessScenarios.Add(bs);
               ts = new ZeroTrustTechnicalScenario() { Name = "Legal compliance requirements" }; bs.TechnicalScenarios.Add(ts);
                  r = new ZeroTrustRecommendation() { Name = "Firewall zones between rsources", ClassName = "" }; ts.Recommendations.Add(r);
                  r = new ZeroTrustRecommendation() { Name = "Implement MIP for regulatory standards", ClassName = "" }; ts.Recommendations.Add(r);
                     c = new ZeroTrustCheck() { Id = "", Name = "Applying sensitivity label policies per regulatory standards, named entitites support for person names / physical addresses / medical terms and conditions for 10 enhanced policy templates (GDPR, HIPAA, GLBA, etc.)", License = "E5", ProductName = "MIP", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                  r = new ZeroTrustRecommendation() { Name = "PCI, etc. This one needs more help from someone an expert in this space.", ClassName = "" }; ts.Recommendations.Add(r);
                  r = new ZeroTrustRecommendation() { Name = "Retention", ClassName = "" }; ts.Recommendations.Add(r);
                     c = new ZeroTrustCheck() { Id = "", Name = "Define and deploy retention policies and governance labels. Use automation in the form of of adaptive policy scopes and auto-labeling to ensure rentention labels is not left up to information workers.", License = "", ProductName = "MIG", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Applying retention policies/labels with appropriate versioning enabled and protection would allow recovery from attacks that tried to delete content or encrypt it through ransomware.", License = "", ProductName = "", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Having good deletion policies in place covering all data in M365 ensures that your attack surface is reduced and you can make sure that in case of an attack you minimize the impact by not having anything that didn't have business need to exist in the tenant.", License = "", ProductName = "", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
            bs = new ZeroTrustBusinessScenario() { Name = "I want to protect customers from diverse range of cyberattacks to ensure smooth business operations." }; zeroTrustData.BusinessScenarios.Add(bs);
               ts = new ZeroTrustTechnicalScenario() { Name = "I want to support BYO-WAF capability for consumer workloads to ensure it is protected from common cyberattacks." }; bs.TechnicalScenarios.Add(ts);
                  r = new ZeroTrustRecommendation() { Name = "Configure Azure Front Door's Web Application Firewall (WAF)", ClassName = "" }; ts.Recommendations.Add(r);
                     c = new ZeroTrustCheck() { Id = "", Name = "Add a custom domain name to your Azure AD B2C tenant", License = "Azure Front Door/Azure AD B2C P1", ProductName = "Azure Front Door/ Azure AD B2C ", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Create a new Azure Front Door instance", License = "Azure Front Door", ProductName = "Azure Front Door", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Set up your custom domain on Azure Front Door", License = "Azure Front Door", ProductName = "Azure Front Door", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Configure CORS", License = "Azure Front Door", ProductName = "Azure Front Door", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Configure Azure Front Door's Azure WAF with Azure Active Directory B2C", License = "Azure Front Door", ProductName = "Azure Front Door (WAF)", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                  r = new ZeroTrustRecommendation() { Name = "Configure BYO-WAF", ClassName = "" }; ts.Recommendations.Add(r);
                     c = new ZeroTrustCheck() { Id = "", Name = "Configure Cloudflare WAF with Azure Active Directory B2C", License = "Partner", ProductName = "Partner", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                  r = new ZeroTrustRecommendation() { Name = "Configure BYO-WAF", ClassName = "" }; ts.Recommendations.Add(r);
                     c = new ZeroTrustCheck() { Id = "", Name = "Configure Akamai WAF with Azure Active Directory B2C", License = "Partner", ProductName = "Partner", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
               ts = new ZeroTrustTechnicalScenario() { Name = "I need to gain insights, in the form of reporting & dashboard, about attack patterns against the consumer workloads" }; bs.TechnicalScenarios.Add(ts);
                  r = new ZeroTrustRecommendation() { Name = "Create and Configure Monitoring Dashboards", ClassName = "" }; ts.Recommendations.Add(r);
                     c = new ZeroTrustCheck() { Id = "", Name = "Create or choose resource group", License = "Azure Monitor", ProductName = "Azure Monitor", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Create a Log Analytics workspace", License = "Azure Monitor", ProductName = "Azure Monitor", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Delegate resource management", License = "Azure Monitor", ProductName = "Azure Monitor", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Select your subscription", License = "Azure Monitor", ProductName = "Azure AD B2C", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Configure diagnostic settings", License = "Azure AD B2C P1", ProductName = "Azure AD B2C", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Visualize your data", License = "Azure Monitor", ProductName = "Azure Monitor", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Deploy Workbooks", License = "Azure Monitor", ProductName = "Azure Monitor", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Change the data retention period", License = "Azure Monitor", ProductName = "Azure Monitor", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
               ts = new ZeroTrustTechnicalScenario() { Name = "I need to receive automated alerts whenever WAF detects & mitigate attacks" }; bs.TechnicalScenarios.Add(ts);
                  r = new ZeroTrustRecommendation() { Name = "Create and Configure Automated Alerts", ClassName = "" }; ts.Recommendations.Add(r);
                     c = new ZeroTrustCheck() { Id = "", Name = "Create alerts", License = "Azure Monitor", ProductName = "Azure Monitor", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Configure action groups", License = "Azure Monitor", ProductName = "Azure Monitor", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Deploy Alerts", License = "Azure Monitor", ProductName = "Azure Monitor", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
               ts = new ZeroTrustTechnicalScenario() { Name = "want to detect and mitigate risk associated with malicious sign-in attempts." }; bs.TechnicalScenarios.Add(ts);
                  r = new ZeroTrustRecommendation() { Name = "Implement Sign-in risk-based Conditional Access (CA)", ClassName = "" }; ts.Recommendations.Add(r);
                     c = new ZeroTrustCheck() { Id = "", Name = "Define a Conditional Access policy", License = "Azure AD B2C P1", ProductName = "Azure AD B2C", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Create Sign-in risk-based Conditional Access policy", License = "Azure AD B2C P2", ProductName = "Azure AD B2C", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Add Conditional Access to a user flow or IEF policy", License = "Azure AD B2C P2", ProductName = "Azure AD B2C", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Enable multifactor authentication", License = "Azure AD B2C P1", ProductName = "Azure AD B2C", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
               ts = new ZeroTrustTechnicalScenario() { Name = "I want to detect and mitigate risk associated with a user account." }; bs.TechnicalScenarios.Add(ts);
                  r = new ZeroTrustRecommendation() { Name = "Implement User  risk-based Conditional Access (CA)", ClassName = "" }; ts.Recommendations.Add(r);
                     c = new ZeroTrustCheck() { Id = "", Name = "Define a Conditional Access policy", License = "Azure AD B2C P1", ProductName = "Azure AD B2C", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Create user risk-based Conditional Access policy", License = "Azure AD B2C P2", ProductName = "Azure AD B2C", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Add Conditional Access to a user flow or IEF policy", License = "Azure AD B2C P1", ProductName = "Azure AD B2C", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                     c = new ZeroTrustCheck() { Id = "", Name = "Enable multifactor authentication", License = "Azure AD B2C P1", ProductName = "Azure AD B2C", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
               ts = new ZeroTrustTechnicalScenario() { Name = "I want to detect and prevent fraudulent sign-up/sign-in attempts." }; bs.TechnicalScenarios.Add(ts);
                  r = new ZeroTrustRecommendation() { Name = "Enable Fraud Protection using Arkose", ClassName = "" }; ts.Recommendations.Add(r);
                     c = new ZeroTrustCheck() { Id = "", Name = "Configure Arkose Labs with Azure Active Directory B2C", License = "Partner", ProductName = "Partner", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                  r = new ZeroTrustRecommendation() { Name = "Enable Fraud Protection using BioCatch", ClassName = "" }; ts.Recommendations.Add(r);
                     c = new ZeroTrustCheck() { Id = "", Name = "Configure BioCatch with Azure Active Directory B2C", License = "Partner", ProductName = "Partner", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
                  r = new ZeroTrustRecommendation() { Name = "Enable Fraud Protection using Dynamics 365 Fraud Protection", ClassName = "" }; ts.Recommendations.Add(r);
                     c = new ZeroTrustCheck() { Id = "", Name = "Configure Microsoft Dynamics 365 Fraud Protection (DFP) with Azure Active Directory B2C", License = "Microsoft DFP", ProductName = "Microsoft DFP", ZeroTrustPrincipal = "" }; r.Checks.Add(c);
            return zeroTrustData;
        }
        #endregion




    }
}









