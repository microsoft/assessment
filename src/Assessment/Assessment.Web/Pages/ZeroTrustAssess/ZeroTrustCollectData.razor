@page "/ZeroTrustCollectData"
@inject IConfiguration Config
@inject IHttpClientFactory ClientFactory
@attribute [Authorize]
@namespace Assessment.Web
@inject Assessment.Shared.ZeroTrust.IZeroTrustDataService ZeroTrustDataService

<PageTitle>Zero Trust Assessment</PageTitle>

<h1>Zero Trust Assessment</h1>

@if (isLoading)
{
    <p>Downloading configuration information for assessment...</p>
    <div>
        <div style="display: grid; grid-gap: 12px; grid-auto-flow: column;">
            <FluentProgressRing style="width: 102px; height: 102px;"></FluentProgressRing>
        </div>

    </div>
}
else
{
    if (recommendationData == null)
    {
        <h2>An error occured. Please re-run assessment.</h2>
    }
    else
    {
        <div>
            <p>Tenant: @recommendationData.TenantName</p>
            <p>Assessed by: @recommendationData.AssessedBy</p>
            <p>Date assessed: @recommendationData.DateAssessed</p>
        </div>

        <SfTreeGrid ChildMapping="Children" TreeColumnIndex="0" DataSource="@TreeData" TValue="TreeViewRow">
            <TreeGridColumns>
                <TreeGridColumn Field="TaskName" HeaderText="Recommendation" Width="250"></TreeGridColumn>
                <TreeGridColumn Field="ProductName" HeaderText="Product" Width="50"></TreeGridColumn>
                <TreeGridColumn Field="Status" HeaderText="Status" Width="50"></TreeGridColumn>
            </TreeGridColumns>
        </SfTreeGrid>

    }
}

@code {
    private ZeroTrustData? recommendationData;
    private bool isLoading = true;
    public List<TreeViewRow> TreeData = new List<TreeViewRow>();

    protected override async Task OnInitializedAsync()
    {
        recommendationData = await ZeroTrustDataService.GetZeroTrustDataAsync();

        LoadTree(recommendationData);
        isLoading = false;
    }

    public class TreeViewRow
    {
        public string TaskName { get; set; }
        public CheckStatus Status { get; set; }
        public string ProductName { get; set; }
        public List<TreeViewRow> Children { get; set; }
    }

    private void LoadTree(ZeroTrustData zt)
    {
        foreach (var bs in zt.BusinessScenarios)
        {
            foreach (var ts in bs.TechnicalScenarios)
            {
                foreach (var r in ts.Recommendations)
                {
                    List<TreeViewRow> children = new List<TreeViewRow>();
                    foreach (var c in r.Checks)
                    {
                        TreeViewRow child = new TreeViewRow() { TaskName = c.Name, ProductName = c.ProductName, Status = c.Status };
                        children.Add(child);
                    }
                    TreeData.Add(new TreeViewRow() { TaskName = r.Name, Children = children, Status = CheckStatus.NotChecked });
                }
            }
        }
    }
}