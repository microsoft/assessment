@page "/ZeroTrustCollectData"
@inject IConfiguration Config
@inject IHttpClientFactory ClientFactory
@attribute [Authorize]
@namespace Assessment.Web
@using Assessment.Shared.ZeroTrust.Data
@inject Assessment.Shared.ZeroTrust.IZeroTrustDataService ZeroTrustDataService

<PageTitle>Zero Trust Assessment</PageTitle>

<h1>Zero Trust Assessment</h1>

@if (isLoading)
{
    <p>Downloading configuration information for assessment...</p>
    <div>
        <div style="display: grid; grid-gap: 12px; grid-auto-flow: column;">
            <FluentProgressRing style="width: 102px; height: 102px;"></FluentProgressRing>
        </div>

    </div>
}
else
{
    if (zeroTrustData == null)
    {
        <h2>An error occured. Please re-run assessment.</h2>
    }
    else
    {
        <div>
            <p>Tenant: @zeroTrustData.TenantName</p>
            <p>Assessed by: @zeroTrustData.AssessedBy</p>
            <p>Date assessed: @zeroTrustData.DateAssessed</p>
        </div>
        <FluentDataGrid RowsData="@zeroTrustChecks" ResizableColumns Pagination="@pagination" GridTemplateColumns="1fr 2fr 0.2fr">

            <PropertyColumn Property="@(c => c.Recommendation.Name)" Sortable="true" Title="Recommendation" />
            <PropertyColumn Property="@(c => c.Name)" Sortable="true" Title="Check" />
            <TemplateColumn Title="Status" Align="Align.Center" SortBy="@sortByStatus" IsDefaultSort="SortDirection.Ascending">
                @if (context.Status == CheckStatus.Success)
                {
                    <FluentIcon Name="@FluentIcons.ShieldCheckmark" Variant=IconVariant.Filled Color="Color.Success" OnClick="RowClick" />
                }
                else if (context.Status == CheckStatus.Fail)
                {
                    <FluentIcon Name="@FluentIcons.ShieldDismiss" Variant=IconVariant.Filled Color="Color.Error" OnClick="RowClick" />
                }
                else
                {
                    <FluentIcon Name="@FluentIcons.ShieldQuestion" Variant=IconVariant.Filled Color="Color.Warning" OnClick="RowClick" />
                }
            </TemplateColumn>
        </FluentDataGrid>
        <FluentPaginator Value="@pagination" />
    }
}

<div>
    <FluentDialog @ref="MyFluentDialog" aria-label="Simple dialog" Modal=@Modal TrapFocus=@TrapFocus @ondialogdismiss=OnDismiss>
        <h2>Just a simple dialog</h2>
        <p>The 'Close dialog' button is automatically focussed.</p>
        <p>The 'Another button' doesn't do anything other than showing receiving focus.</p>
        <FluentButton Appearance="Appearance.Accent" Autofocus="true" @onclick="OnClose">Close dialog</FluentButton>
        <FluentButton>Another button</FluentButton>
    </FluentDialog>
</div>

@code {
    private bool isLoading = true;
    private ZeroTrustData? zeroTrustData;
    private IQueryable<ZeroTrustCheck>? zeroTrustChecks;
    PaginationState pagination = new PaginationState { ItemsPerPage = 20 };

    private FluentDialog? MyFluentDialog;
    public bool TrapFocus = true;
    public bool Modal = true;


    GridSort<ZeroTrustCheck> sortByStatus = GridSort<ZeroTrustCheck>
     .ByAscending(p => p.Status)
     .ThenAscending(p => p.Status);

    protected override async Task OnInitializedAsync()
    {
        zeroTrustData = await ZeroTrustDataService.GetZeroTrustDataAsync();
        zeroTrustChecks = zeroTrustData.Checks.AsQueryable();
        isLoading = false;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            MyFluentDialog!.Hide();
    }

    private void OnOpen()
    {
        MyFluentDialog!.Show();
    }

    private void OnClose()
    {
        MyFluentDialog!.Hide();

    }

    private void OnDismiss(DialogEventArgs args)
    {
        if (args is not null && args.Reason is not null && args.Reason == "dismiss")
        {
            MyFluentDialog!.Hide();
        }
    }


    private void RowClick(MouseEventArgs args)
    {
        MyFluentDialog!.Show();
    }
}