<#
.SYNOPSIS
    Reads Zero Trust scenarios from Excel and generates corresponding C# code to represent scenarios.
.DESCRIPTION
    This cmdlet assumes the file ZeroTrust config file 'Zero Trust Scenarios_ForWizards_UseThisCopy.xlsx' 
    stored in the ZT Advisory V-Team SharePoint site has been synced to the local device where this script is running.
    Run the script to import the latest wording from the config file to a .cs file.
    The .cs file needs to include a region with the following name.
    #region AutoGeneratedZeroTrustDataFromExcel

    The generated code will be 
    Requires module
    * Install-Module ImportExcel

.EXAMPLE
    PS C:\> Import-ZeroTrustScenarios 
        -ExcelPath 'F:\OneDrive\Zero Trust Scenarios_ForWizards_UseThisCopy.xlsx'
        -AssessmentSharedProjectFolder 'F:\code\msassessment\src\Assessment\Assessment.Shared'
#>

param (
    # Location of the Zero Trust Scenarios excel file. e.g. 'F:\OneDrive\Zero Trust Scenarios_ForWizards_UseThisCopy.xlsx'
    [Parameter(Mandatory = $true)]
    [string] $ExcelPath,

    # Location of the Assessment.Shared project folderwhere the generated C# code will be inserted. e.g. 'F:\code\msassessment\src\Assessment\Assessment.Shared'
    [Parameter(Mandatory = $true)]
    [string] $AssessmentSharedProjectFolder
)

# Removes new line characters and returns the first line in the cell.
function GetFirstLine($text) {
    if ($text) {
        $arr = $text -split "`n"
        foreach ($line in $arr) {
            if (![string]::IsNullOrEmpty($line)) {
                return $line.Trim()
            }
        }
        return $text.Trim()    
    }
    else {
        return $text
    }
}

function GetClassName($checkId) {
    if([string]::IsNullOrEmpty($checkId)) { return $null }

    $checkIdItems = $checkId -split "_"
    if($checkIdItems.Length -eq 2){
        $classPrefix = $checkIdItems[0]
        $recoCodeFolder = Join-Path $AssessmentSharedProjectFolder '\ZeroTrust\Recommendations'
        $recoFilePath = Get-ChildItem -Path $recoCodeFolder -Filter "$($classPrefix)_*" | Select-String Name
        if($recoFilePath){
            return $recoFilePath
        }
        else {
            throw "No classname with $classPrefix prefix was found in the Assessment.Shared/Recommendations folder."
        }
    }
    else {
        throw "$checkId is not a valid name for Name in ZT Assessment Tool. Needs to be in format Rnnnn_Cnn."
    }
}

Import-Module ImportExcel

$ztScenarios = Import-Excel $ExcelPath -WorksheetName "Wizards- Foundational Scenarios" -Raw -StartRow 2

$code = "#region AutoGeneratedZeroTrustDataFromExcel`r`n"
$code += "        private ZeroTrustData InitializeMetadata()`r`n"
$code += "        {`r`n"
$code += "            ZeroTrustData zeroTrustData = new ZeroTrustData();`r`n"
$code += "            ZeroTrustBusinessScenario bs; ZeroTrustTechnicalScenario ts; ZeroTrustRecommendation r; ZeroTrustCheck c;`r`n"

foreach ($item in $ztScenarios) {
    $bs = GetFirstLine $item.'Business Scenario'
    if (![string]::IsNullOrEmpty($bs)) {
        $code += "            bs = new ZeroTrustBusinessScenario() { Name = `"$bs`" }; zeroTrustData.BusinessScenarios.Add(bs);`r`n"
    }
    $ts = GetFirstLine $item.'Technical Scenario'
    if (![string]::IsNullOrEmpty($ts)) {
        $code += "               ts = new ZeroTrustTechnicalScenario() { Name = `"$ts`" }; bs.TechnicalScenarios.Add(ts);`r`n"
    }
    $r = GetFirstLine $item.'M365 Controls / IT Actions'
    if (![string]::IsNullOrEmpty($r)) {
        $className = $item.'Name in ZT Asssessment Tool'
        $code += "                  r = new ZeroTrustRecommendation() { Name = `"$r`", ClassName = `"$className`" }; ts.Recommendations.Add(r);`r`n"
    }
    $c = GetFirstLine $item.'Sub Tasks'
    $checkId = $item.'Name in ZT Asssessment Tool'
    if (![string]::IsNullOrEmpty($c) -and ($checkId -ne 'Ignore')) {
        $className = GetClassName $checkId
        $license = $item.'License Required'
        $productName = $item.'Product Name'
        $ztPrincipal = $item.'Zero Trust Principal'
        $code += "                     c = new ZeroTrustCheck() { Id = `"$checkId`", Name = `"$c`", License = `"$license`", ProductName = `"$productName`", ZeroTrustPrincipal = `"$ztPrincipal`" }; r.Checks.Add(c);`r`n"
    }
}
$code += "            return zeroTrustData;`r`n"
$code += "        }`r`n"
$code += "        #endregion`r`n";

$csCodePath = Join-Path $AssessmentSharedProjectFolder '\ZeroTrust\ZeroTrustDataService.cs'
$content = Get-Content $csCodePath -Raw
$generatedContent = $content -replace '\#region AutoGeneratedZeroTrustDataFromExcel[\s\S]*?\#endregion.*?', $code
Set-Content -Path $csCodePath -Value $generatedContent